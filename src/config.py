import warnings
import matplotlib.font_manager as fm
from matplotlib.colors import is_color_like
from dotenv import load_dotenv
import datetime
import os
from fastapi.security import OAuth2PasswordBearer

from common.custom_types import WantedAreas, WantedCategories
from common.map_enums import Style, MapOrientation, MarkersCodes, BaseConfigKeys, MarkerPosition
load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY", "dev_key")
OAUTH2_SCHEME = OAuth2PasswordBearer(tokenUrl="token")

MAX_CONCURRENT_TASKS_NORMAL = 2
MAX_CONCURRENT_TASKS_PREVIEW = 3

MAX_QUEUE_SIZE_NORMAL = 5
MAX_QUEUE_SIZE_PREVIEW = 5
FILE_DOWNLOAD_CHUNK_SIZE  = 1024 * 1024 # 1MB
OSM_AVAILABLE_FILES = {
    'cz': '../osm_files/cz.osm.pbf',
    'brno': '../osm_files/brno.osm.pbf',
    'trebic': '../osm_files/trebic.osm.pbf'
}

# set if want osm file cutting using osmium command line tool (need to be uinstalled), If not set to None
# OSM_OUTPUT_FILE_NAME: None | str = '../osm_files/brnoPrevTest.osm.pbf'

OSM_OUTPUT_FOLDER_FILE_NAME: None | str = None
OSM_TMP_FILE_FOLDER = '../osm_files/tmp/'

# in server send and than delete, and name will be generated by uuid
OUTPUT_PDF_FOLDER_FILE_NAME: None | str = None  # "../pdfs/brno.pdf"
OUTPUT_PDF_FOLDER: str = '../pdfs/'

GPX_TMP_FOLDER = '../gpx_files/tmp/'

# AREA: WantedAreas = [(-18.14143,65.68868),(-18.08538,65.68868),(-18.08538,65.67783),(-18.14143,65.67783)] #island
# AREA: WantedAreas = [(6.94872,4.84293),(6.99314,4.84293),(6.99314,4.81603),(6.94872,4.81603)] #afrika
# AREA: WantedAreas = [(13.2198495,-8.8130580),(13.2614774,-8.8139062),(13.2616062,-8.8439302),(13.2181329,-8.8424460)] #angola - mesto 5km
# AREA: WantedAreas = [{"area":[(13.2020960,-8.7766815),(13.2020370,-8.8766827),(13.3099288, -8.8775122), (13.3082471,-8.7782667)], "plot":False}] # angola- 11.85 - z14 - square

# AREA: WantedAreas = [{"area": [(34.6899078,31.3465564),(34.9503222,31.3504081),(34.9544419, 31.2019328), (34.6962633,31.2104486)], "plot":False}] # israel

# AREA: WantedAreas = [{"area": [(13.0140862,-8.8831442),(13.1660763,-8.8819132),(13.1667146, -9.0826624), (13.0159664,-9.0781028)],
#                      "plot": False, "category": 0, "width": 1}] # angol- ostrovy test
# AREA: WantedAreas = [(15.7937669,49.251 1294),(15.7940459,49.1851468),(15.9009507, 49.1847962), (15.9003445,49.2499564)] # tr - 7.8 - z14 - square

# viden zoo - chodnik a ikony - rchod
# AREA: WantedAreas = [{'area':[(16.2985736,48.1866714), (16.3121350, 48.1865714), (16.3120706, 48.1803122), (16.2985736, 48.1803981)], "plot":False}] # zoom 10/17

# rakousko - cestičky -rcest
# AREA: WantedAreas = [{'area':[(16.0627306,48.0580592), (16.0897244, 48.0580592), (16.0897244, 48.0453939), (16.0626878, 48.0454514)], "plot":False}] # zoom 9/16

# rakousko - cestičky u koní -rkon
# AREA: WantedAreas = [{'area': [(15.9759536,48.0569747), (16.0298253, 48.0564572), (16.0299514, 48.0315206), (15.9758781, 48.0318936)], "plot":False}] # zoom 8/15

# rakousko - dalince konce a trunk - rtrunk
# AREA: WantedAreas = [{'area': [(16.7637897,48.6661533), (16.5724411, 48.6708094), (16.5820542, 48.7711483), (16.7701950, 48.7706958)], "plot":False}] # zoom 8/15

# rakousko - dalince konce a trunk - rnpark
# AREA: WantedAreas = [{'area': [(16.6840794, 47.8736964), (16.9535233, 47.8754153), (16.9468556, 47.7549778), (16.6704806, 47.7522078)], "plot":False}] # zoom 8/15

# rakousko - invalidní oblast - rinvalid
# AREA: WantedAreas = [{'area': [(16.3351344, 48.2143981), (16.3379578, 48.2144222), (16.3377272, 48.2127386), (16.3351631, 48.2128781)], "plot":False}] # zoom 8/15


# slovensko - aminety grave - skgrave
# AREA: WantedAreas = [{'area': [(17.5622753,48.2370358), (17.5805572, 48.2372431), (17.5798706, 48.2319261), (17.5622325, 48.2326694)], "plot":False}] # zoom 8/15

# slovensko - cesty/tunel - pathtunel -skprimlink
# AREA: WantedAreas = [{'area': [(17.0829244,48.1368075), (17.11670941, 48.1362819), (17.1167183,48.1188031), (17.0824389, 48.1203419)], "plot":False}] # zoom 8/15

# slovensko - cesty/tunel - pathtunel -skseclink
# AREA: WantedAreas = [{'area': [(17.0684572,48.1268372), (17.1043628, 48.1272075), (17.1034186,48.1060056), (17.0688289, 48.1074958)], "plot":False}] # zoom 8/15

# slovensko - cesty/tunel - pathtunel -skptunl
# AREA: WantedAreas = [{'area': [(16.9703950,48.2047167), ( 17.0168581, 48.2045317), (17.0169011, 48.1791842), (16.9623128, 48.1794417)], "plot":False}] # zoom 8/15

# slovensko - cyklotrasa asfalt/non asfalt- pathtunel u koní -skptunl

# slovensko - lanovky - sklan
# AREA: WantedAreas = [{'area': [(18.9836906,49.2351414), (19.1019653, 49.2350294), (19.1017936, 49.1852375), (18.9838622, 49.1870325)], "plot":False}] # zoom

# slovensko - letiste - sklet
# AREA: WantedAreas = [{'area': [(17.1374492,48.1955133), (17.2557239, 48.1951700), (17.2557239, 48.1444531), (17.1377925, 48.1452547)], "plot":False}] # zoom

# slovensko - bratislava centrum  - skbr
# AREA: WantedAreas = [{'area': [(17.0797297, 48.1649183), (17.1410558, 48.1642600), (17.1413133, 48.1383769), (17.0762106, 48.1384056)], "plot": False}]  # zoom

# slovensko - voj prostor  - skvoj
# AREA: WantedAreas = [{'area': [(17.0325058,48.6691606), (17.6252633, 48.6856314), (17.6225169, 48.1661969), (17.0031625, 48.1808503)], "plot":False}] # zoom

# slovensko - bratislava nakup a landuse others  - sknak
# AREA: WantedAreas = [{'area': [(16.9756656,48.1968728), (16.9761267, 48.2213817), (17.0408431, 48.2214961), (17.0408431, 48.1953561)], "plot":False}] # zoom

# slovensko - bratislava area way  - skareaway
# AREA: WantedAreas = [{'area': [(17.1848258,48.1529047), (17.2031475, 48.1531017), (17.2038558, 48.1396642), (17.1842006, 48.1394925)], "plot":False}] # zoom

# slovensko - potok, reka, kanal, silnice 1,2,3 a dalnice, zelecnice, residental,
# service, footway
# industrial zona - skways
# AREA: WantedAreas = [{'area': [(16.8529242,48.4770300), (17.2031475, 48.4733883), (17.1986503, 48.3386914), (16.8525808, 48.3382350)], "plot":False}] # zoom


# nemecko - funicular tunnel a railway tunnel - gefun
# AREA: WantedAreas = [{'area': [(8.6807722,49.4195719), (8.7399353, 49.4195644), (8.7400211, 49.3951311), (8.6807550, 49.3952708)], "plot":False}] # zoom


# rozhledna - baliny
# AREA: WantedAreas = [{"area": "Baliny, Česko", "plot": True, "category": 0, "width": None}]


# zricenina - rokstejn - Brtnice
# AREA: WantedAreas = [{"area": "Brtnice, Česko", "plot": True, "category": 0, "width": None}]


# zoom testing
# AREA: WantedAreas = [{'area':[(15.8096936,48.6459956), (15.8232333, 48.6460311), (15.8232550, 48.6397219), (15.8097686, 48.6397503)], "plot": False}] # zoom 10/17 - 0.19673458447026707
# AREA: WantedAreas = [{'area':[(15.8036264,48.6490436), (15.8307706, 48.6489869), (15.8307706, 48.6363825), (15.8035836, 48.6365244)], "plot": False}] # zoom 9/16 - 0.0981350054744773
# AREA: WantedAreas = [{'area':[(15.8408317, 48.6556897), (15.7863853, 48.6557486), (15.7865139, 48.6306536), (15.8407161, 48.6304267)], "plot": False}] # zoom 8/15 - 0.049002255315964124
# AREA: WantedAreas = [{'area':[(15.7568897,48.6700053), (15.8648558, 48.6704314), (15.8651992, 48.6197892), (15.7563658, 48.6202431)], "plot": False}] # zoom 7/14 - 0.024514500087610937
# AREA: WantedAreas = [{'area':[(15.7034756,48.6941575), (15.9206889, 48.6941186), (15.9198775, 48.5926164), (15.7030222, 48.5936264)], "plot": False}] # zoom 6/13 - 0.012257255675006467
# AREA: WantedAreas = [{'area':[(15.5986414,48.7535425), (16.0311167, 48.7533311), (16.0307733, 48.5528361), (15.5975000, 48.5544269)], "plot": False}] # zoom 5/12 - 0.0061528912374338475
# AREA: WantedAreas = [{'area':[(15.3856592,48.8443469), (16.2499850, 48.8453725), (16.2499850, 48.4415864), (15.3854983, 48.4465967)], "plot": False}] # zoom 4/11 - 0.0030862202898378687
# AREA: WantedAreas = [{'area':[(14.8355758,49.0061161), (16.5771717,49.0046311), (16.5799181, 48.2009656), (14.8385853, 48.2055419)], "plot": False}] # zoom 3/10 - 0.001529514243755352
# AREA: WantedAreas = [{'area':[(14.0269703,49.4851617), (17.5151294,49.4833772), (17.5096361,47.8731517), (14.0297167, 47.8786783], "plot": False}] # zoom 2/9 - 0.000764872334474359
# AREA: WantedAreas = [{'area':[(12.4551956,50.4569714), (19.4047778,50.4934189), (19.3992847, 47.2727942), (12.4284594, 47.3100528)], "plot": False}] # zoom 1/8 - 0.0003824361562733402

# AREA = []
# AREA: WantedAreas = [{"area": "Česko", "plot": True, "category": 0, "width": 1}]

# AREA: WantedAreas = [{"area": "4", "plot": True, "category": 5, "width": None}]
# AREA: WantedAreas = [{"area": "Baliny, Česko", "plot": True, "category": 0, "width": None}]
# AREA: WantedAreas =[{"area": "Jihomoravský kraj, Česko", "plot": True, "category": 2, "width": 1},
#                     {"area": "Praha, Česko", "plot": True, "category": 1, "width": 1},
#                     {"area": "Trebic, Česko", "plot": True, "category": 1, "width": 1}]
# AREA: WantedAreas = [{"area": "Třebíč, Česko", "plot": True, "category": 2, "width": 1},
#                     {"area": "Brno, Česko", "plot": True, "category": 1, "width": 1}]

# AREA: WantedAreas = [{"area": "Třebíč, Česko", "plot": False, "category": 1, "width": 1},
#                     {"area": "Trnava, Vysočina, Česko", "plot": False, "category": 1, "width": 1},
#                     {"area": "Horní Vilémovice, Česko", "plot": False, "category": 1, "width": 1}]
# AREA: WantedAreas = [{"area": "Jaroměřice nad rokytnou, Česko", "plot": True, "category": 0, "width": 1}]
# AREA: WantedAreas = [{"area": "Jihomoravský kraj, Česko", "plot": True, "category": 1, "width": 1},
#                     {"area": "Kraj Vysočina, Česko", "plot": True, "category": 1, "width": 1},
#                     {"area": "Třebíč, Česko", "plot": False, "category": 0, "width": 1}]
# AREA: WantedAreas = [{"area": "Německo", "plot": True, "category": 1, "width": 1},
# {"area": "Lucembursko", "plot": True, "category": 2, "width": 1}]

# AREA: WantedAreas = ["Kraj Vysočina, Česko"]
# AREA: WantedAreas = ["Jihomoravský kraj, Česko"]
# AREA: WantedAreas = ["Česko"]
# AREA: WantedAreas = ["Okřešice, Česko"]
# AREA: WantedAreas = ["Třebíč, Česko"]
# AREA: WantedAreas = ["Okres Třebíč, Česko", "Třebíč, Česko", "Okres Jihlava, Česko"]
# AREA: WantedAreas = ["Texas, USA"]

# set own dimensions. If one is left as 'None' it will be automaticaly calculated using area size
# PAPER_DIMENSIONS = (1100, None)


# WANTED_ORIENTATION: MapOrientation = MapOrientation.AUTOMATIC





# is calc as 2.5 * scale * 10 where scale is mm:m so scale * 10 is 1 cm
#PEAKS_FILTER_SENSITIVITY: float | None = 3

# from fe by zoom or from be map styles by zoom
#MIN_POPULATION # zoom 5 - 500, zoom 4 - 750
PLACES_TO_FILTER_BY_POPULATION = ['city', 'town', 'village']
# --------------------------------------------------------------preview--------------------------------------------------------------

ALLOWED_WANTED_ELEMENTS_STRUCTURE = {
    'nodes': {
        'place': ['city', 'town', 'village', 'suburb', 'neighbourhood', 'locality'],
        'natural': ['peak'],
        'man_made': ['tower'],
        'historic': ['castle'],
    },
    'ways': {
        'highway': ['motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'motorway_link', 'trunk_link', 'primary_link', 'secondary_link', 'tertiary_link', 'residential', 'unclassified', 'service',
                    'pedestrian', 'cycleway', 'raceway', 'steps', 'footway', 'track', 'path'],
        'railway': ['rail', 'light_rail', "monorail", 'miniature', 'subway', 'funicular'],
        'aeroway': ['runway', 'taxiway'],
        'aerialway': ['cable_car', 'gondola', 'chair_lift', 'mixed_lift', 't-bar', 'j-bar', 'platter', 'rope_tow', 'magic_carpet', 'zip_line', 'goods'],
        'barrier': ['city_wall', 'wall', 'cable_barrier'],
        'waterway': ['river', 'canal', 'stream', 'drain', 'ditch'],
        'route': ['ferry'],
    },
    'areas': {
        'landuse': ['farmland', 'forest', 'residential', 'commercial', 'retail', 'industrial', 'allotments', 'meadow',
                    'grass', 'landfill', 'cemetery', 'vineyard', 'orchard', 'garages', 'quarry', 'recreation_ground'],
        'leisure': ['park', 'garden', 'pitch', 'golf_course', 'playground', 'sports_centre', 'swimming_pool'],
        'natural': ['wood', 'water', 'scrub', 'heath', 'grassland', 'beach', 'sand'],
        'amenity': ['motorcycle_parking', 'parking', 'grave_yard', 'school', 'university', 'college', 'kindergarten', 'bus_station', 'hospital', 'clinic', 'place_of_worship'],
        'boundary': ['national_park'],
        'building': True,
        'aeroway': ['aerodrome'],
        'highway': ['pedestrian', 'footway'],

    }
}

NODES_ALSO_FROM_AREA = {
    'man_made': ['tower'],
    'historic': ['castle'],
}
MANDATORY_WAYS = {
    'natural': {'coastline'}
}


JWT_EXPIRATION_TIME = datetime.timedelta(days=2)

# --------------------------------------------------------------constants--------------------------------------------------------------# world 3857
CRS_OSM = "EPSG:4326"  # WGS84 - World Geodetic System 1984 - unit - degrees
CRS_DISPLAY = "EPSG:3857"  # WGS 84 / Pseudo-Mercator - unit - meters
try:
    font_paths = fm.findSystemFonts(
        fontpaths='./common/fonts/texts', fontext='ttf')
    for font_path in font_paths:
        fm.fontManager.addfont(font_path)
except:
    warnings.warn("Font paths not found")
try:
    FONT_AWESOME_PATH = "./common/fonts/markers/FontAwesome6Free-Solid-900.otf"
    font_awesome_prop = fm.FontProperties(fname=FONT_AWESOME_PATH)
except:
    font_awesome_prop = None
    warnings.warn("Font awesome not found")
try:
    MATERIAL_DESIGN_OUTLINE_PATH = "./common/fonts/markers/MaterialSymbolsRounded-VariableFont_FILL,GRAD,opsz,wght.ttf"
    material_design_prop = fm.FontProperties(
        fname=MATERIAL_DESIGN_OUTLINE_PATH)
except:
    material_design_prop = None
    warnings.warn("Material desing outline not found")

# mapping tuple - new key, new value (function), bool - extract - as new keys are added to dict
MARKERS_UCODE_MAPPING: dict[str, str] = {
    "finish": {Style.FINISH_MARKER.value: MarkersCodes.FA_FINISH_ICON.value, 
                  Style.FINISH_MARKER_FONT_PROPERTIES.value: font_awesome_prop, 
                  Style.FINISH_MARKER_VERTICAL_ALIGN.value: 'bottom',
                  Style.FINISH_MARKER_HORIZONTAL_ALIGN.value: 'left'},
    
    "start": {Style.START_MARKER.value: MarkersCodes.MPL_CIRCLE_MARKER.value, 
                  Style.START_MARKER_FONT_PROPERTIES.value: None,
                  Style.START_MARKER_VERTICAL_ALIGN.value: None,
                  Style.START_MARKER_HORIZONTAL_ALIGN.value: None}
}

GPX_FILE_COLUMN = 'file_name'
GPX_GROUP_COLUMN = 'group'
GPX_NORMAL_COLUMNS = [GPX_FILE_COLUMN, GPX_GROUP_COLUMN]
GPX_GENERAL_KEYS = ['general']

ALLOWED_WANTED_PAPER_ORIENTATIONS = [MapOrientation.AUTOMATIC.value, MapOrientation.LANDSCAPE.value, MapOrientation.PORTRAIT.value]
MIN_WIDTH_POINTS = 0.1
MIN_TEXT_WIDTH = 0.1
MM_TO_INCH = 25.4
MATPLOTLIB_POINTS_PER_INCH = 72
FUNC_MM_TO_POINTS_CONVERSION = lambda v: max(v / MM_TO_INCH * MATPLOTLIB_POINTS_PER_INCH, MIN_WIDTH_POINTS)

# is validated and not mapped
FIT_PAPER_VALIDATION = {"fit": (bool, True, None), "plot": (bool, True, None),
                        "width": (int | float, False)}

REQ_AREA_KEY_WITH_AREA = "area"
REQ_AREA_KEY_WITH_BOOLEAN_PLOT = "plot"
REQ_AREA_KEY_TO_GROUP_BY = "group"
# key, (types, required)
REQ_AREA_DICT_KEYS = {"area": (str | list, True, None), "plot": (bool, True, None), "group": (
    int, False, lambda v: 0 <= v), "width": (int | float, False)}
REQ_AREAS_MAPPING_DICT = {"width": (Style.WIDTH.value, FUNC_MM_TO_POINTS_CONVERSION)}

FE_EDIT_STYLES_VALIDATION = {'width_scale': (float | int, False),
                             "text_scale": (float | int, False, lambda v: MIN_TEXT_WIDTH <= v)}
FE_EDIT_STYLES_MAPPING = {"width_scale": (Style.FE_WIDTH_SCALE.value, None),
                          "text_scale": (Style.FE_TEXT_FONT_SIZE_SCALE.value, None)}
FE_STYLES_ALLOWED_ELEMENTS = ['nodes', 'ways', 'areas']

ZOOM_STYLE_LEVELS_VALIDATION = {"nodes": (int, True, lambda v: 1 <= v <= 10), "ways": (
    int, True, lambda v: 1 <= v <= 10), "areas": (int, True, lambda v: 1 <= v <= 10), "general": (int, True, lambda v: 1 <= v <= 10)}

GPX_STYLES_VALIDATION = {
    "color": (str, False, lambda v: is_color_like(v)),
    "width": (int | float, False),
    "alpha": (float|int, False, lambda v: 0 <= v <= 1),
    "zindex": (int, False, lambda v: 0 <= v),
    "linestyle": (str, False, lambda v: v in ['-', '--', '- -']),
    "line_capstyle": (str, False, lambda v: v in ['round', 'butt', 'projecting']),
    "edge_alpha": (float|int, False, lambda v: 0 <= v <= 1),
    "edge_color": (str, False, lambda v: is_color_like(v)),
    "edge_width_ratio": (float|int, False, lambda v: 0 <= v),
    "edge_linestyle": (str, False, lambda v: v in ['-', '--', '- -']),
    "edge_capstyle": (str, False, lambda v: v in ['round', 'butt', 'projecting']),
    "gpx_above_text": (bool, False, None),
    "start_marker": (str, False, lambda v: v in MARKERS_UCODE_MAPPING.keys()),
    "start_marker_width": (int|float, False),
    "start_marker_edge_ratio": (int|float, False, lambda v: 0 <= v),
    "start_marker_color": (str, False, lambda v: is_color_like(v)),
    "start_marker_edge_color": (str, False, lambda v: is_color_like(v)),
    "start_marker_alpha": (int|float, False, lambda v: 0 <= v <= 1),
    "finish_marker": (str, False, lambda v: v in MARKERS_UCODE_MAPPING.keys()),
    "finish_marker_width": (int|float, False),
    "finish_marker_edge_ratio": (int|float, False, lambda v: 0 <= v),
    "finish_marker_color": (str, False, lambda v: is_color_like(v)),
    "finish_marker_edge_color": (str, False, lambda v: is_color_like(v)),
    "finish_marker_alpha": (int|float, False, lambda v: 0 <= v <= 1),
    "marker_layer_position": (str, False, lambda v: v in ['above_text', 'under_text']),
}

GPX_STYLES_MAPPING = {
    'color': (Style.COLOR.value, None),
    "width": (Style.WIDTH.value, FUNC_MM_TO_POINTS_CONVERSION),
    "alpha": (Style.ALPHA.value, None),
    "zindex": (Style.ZINDEX.value, None),
    "linestyle": (Style.LINESTYLE.value, lambda v: (0, (5, 5)) if v == '- -' else v),
    "line_capstyle": (Style.LINE_CAPSTYLE.value, None),
    "edge_alpha": (Style.EDGE_ALPHA.value, None),
    "edge_color": (Style.EDGE_COLOR.value, None),
    "edge_width_ratio": (Style.EDGE_WIDTH_RATIO.value, None),
    "edge_linestyle": (Style.EDGE_LINESTYLE.value, lambda v: (0, (5, 5)) if v == '- -' else v),
    "edge_capstyle": (Style.EDGE_CAPSTYLE.value, None),
    "gpx_above_text": (Style.GPX_ABOVE_TEXT.value, None),
    "start_marker": (None, lambda v: MARKERS_UCODE_MAPPING[v], True),
    "start_marker_width": (Style.START_MARKER_WIDTH.value, FUNC_MM_TO_POINTS_CONVERSION),
    "start_marker_edge_ratio": (Style.START_MARKER_EDGE_RATIO.value, None),
    "start_marker_color": (Style.START_MARKER_COLOR.value, None),
    "start_marker_edge_color": (Style.START_MARKER_EDGE_COLOR.value, None),
    "start_marker_alpha": (Style.START_MARKER_ALPHA.value, None),
    "finish_marker": (None, lambda v: MARKERS_UCODE_MAPPING[v], True),
    "finish_marker_width": (Style.FINISH_MARKER_WIDTH.value, FUNC_MM_TO_POINTS_CONVERSION),
    "finish_marker_edge_ratio": (Style.FINISH_MARKER_EDGE_RATIO.value, None),
    "finish_marker_color": (Style.FINISH_MARKER_COLOR.value, None),
    "finish_marker_edge_color": (Style.FINISH_MARKER_EDGE_COLOR.value, None),
    "finish_marker_alpha": (Style.FINISH_MARKER_ALPHA.value, None),
    "marker_layer_position": (Style.MARKER_LAYER_POSITION.value, lambda v: MarkerPosition.UNDER_TEXT_OVERLAP.value if v == 'under_text' else MarkerPosition.ABOVE_ALL.value),
}


BASE_OSM_CONFIG = {
    'nodes': {
        BaseConfigKeys.ADDITIONAL_COLUMNS: ['name', 'ele', 'population', 'tower:type', 'capital'],
        BaseConfigKeys.NUMERIC_COLUMNS: ['ele', 'population'],
        BaseConfigKeys.ROUND_COLUMNS: ['ele'],
        BaseConfigKeys.DERIVATE_COLUMNS: [
            ({'place': ''}, Style.TEXT1.value, 'name', None),
            ({'man_made': 'tower'}, Style.TEXT1.value, 'name', None),
            ({'natural': 'peak'}, Style.TEXT1.value, 'name', None),
            ({'historic': 'castle'}, Style.TEXT1.value, 'name', None),
            ({'natural': 'peak'}, Style.TEXT2.value, 'ele', None),
        ],
        BaseConfigKeys.DONT_CATEGORIZE: [
            Style.TEXT1_POSITIONS.value, Style.TEXT2_POSITIONS.value, Style.TEXT_FONTFAMILY.value
        ],
    },

    'ways': {
        BaseConfigKeys.ADDITIONAL_COLUMNS: ['name', 'layer', 'bridge', 'tunnel', 'historic',
                                            'surface', 'tracktype', 'service', 'intermittent', 'covered'],
        BaseConfigKeys.NUMERIC_COLUMNS: [],
        BaseConfigKeys.ROUND_COLUMNS: [],

        BaseConfigKeys.DERIVATE_COLUMNS: [],
        BaseConfigKeys.DONT_CATEGORIZE: [],
    },

    'areas': {
        BaseConfigKeys.ADDITIONAL_COLUMNS: ['area', 'place'],
        BaseConfigKeys.NUMERIC_COLUMNS: [],
        BaseConfigKeys.ROUND_COLUMNS: [],

        BaseConfigKeys.DERIVATE_COLUMNS: [],
        BaseConfigKeys.DONT_CATEGORIZE: [],
    }
}


# zooms: scaling values for center of each zoom level
# zoom level: scaling value
ZOOM_MAPPING: dict[int, float] = {
    10: 0.1967345,
    9: 0.0981350,
    8: 0.0490022,
    7: 0.0245145,
    6: 0.0122572,
    5: 0.0061528,
    4: 0.0030862,
    3: 0.0015295,
    2:  0.0007648,
    1:  0.0003824,
}

# fmt: off
from styles.mapycz_style import MAPYCZ_STYLE, MAPYCZ_BASE_OSM_CONFIG

STYLES = {
    "mapycz": (MAPYCZ_STYLE, MAPYCZ_BASE_OSM_CONFIG),
}
DEFAULT_STYLE = (MAPYCZ_STYLE, MAPYCZ_BASE_OSM_CONFIG)

JWT_ALGORITHM = "HS256"
